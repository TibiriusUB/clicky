{"version":3,"sources":["components/Wrapper/index.js","components/ScoreBoard/index.js","components/Tile/index.js","components/TableTop/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","ScoreBoard","score","Tile","onClick","err","handleClick","icons","id","image","aria-hidden","name","TableTop","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","mortar","values","index","arr","components_Tile","key","x","y","Randomizer","mixer","i","newArray","length","Math","floor","random","push","splice","bind","assertThisInitialized","state","grabBag","glue","clicked","notClicked","console","log","setState","slice","val","tileBag","map","obj","sort","every","click","check","components_ScoreBoard","components_Wrapper","React","Component","App","components_TableTop","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5fe473e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction ScoreBoard(props) {\r\n  return (\r\n    <div className=\"jumboron\">\r\n      <h1 className=\"scoreboard\">{props.children}</h1>\r\n      <div>\r\n        <div className=\"card score\">Score: {props.score}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ScoreBoard;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Tile(props) {\r\n  //console.log(props);\r\n  return (\r\n    <div className=\"card text-white bg-primary mb-3\" onClick={(err) => props.handleClick(props.icons.id,err)}>\r\n      <div className=\"card-body\">\r\n        <i className={props.icons.image} aria-hidden='true'></i>\r\n      </div>\r\n      <div className=\"card-title\">{props.icons.name}</div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Tile;\r\n// class Tile extends React.Component {\r\n  \r\n//   constructor(icons) {\r\n//     super()\r\n//     this.state =  icons \r\n//   }\r\n  \r\n//   render() {\r\n//     return (\r\n//       <div className=\"card text-white bg-primary mb-3\" onClick={(err) => handleClick(this.state.icons.icons.id, err)}>\r\n//         <div className=\"card-header\">{this.state.icons.icons.name}</div>\r\n//         <div className=\"card-body\">\r\n//           <i className={this.state.icons.icons.image} aria-hidden='true'></i>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n//   function handleClick(err) { onClick={handleClick}\r\n//     err.preventDefault();\r\n//     console.log('The tile was clicked.');\r\n//   }","import React from \"react\";\r\nimport \"./style.css\";\r\nimport Wrapper from \"../Wrapper\";\r\nimport ScoreBoard from \"../ScoreBoard\";\r\nimport Tile from \"../Tile\";\r\n// import icons from \"../../icons.json\";\r\n\r\n//create a slotted system  starting with the icons.\r\n//cards on the table, the code starts here...\r\n//pass the icons through a random selector to bring to 12, (future feature, and larger selections might be possible) \r\n//followed by the randomizer for the 12 selected. pass that to the tile generator, with a button property from here\r\n//next, accept the click, and compare the id against a recorded 'state' array of clicked ids. \r\n// clicking an already clicked id gets you the boot, clicking a differnt one each time gets you a score for each until 12. \r\n//(you win at 12, game resets by regeneraterating the initial 12, and putting the next array through the ringer. ) \r\n\r\nclass TableTop extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.state = {\r\n      grabBag: this.Randomizer(this.props.icons).splice(0, 12),\r\n      glue: [],\r\n      score: 0,\r\n      clicked: [0],\r\n      notClicked: []\r\n    }\r\n    console.log(this.props)\r\n    console.log(this.state)\r\n  };\r\n\r\n  //Randomizer(this.props.random).splice(0,12)}\r\n\r\n  \r\n  componentDidMount() {\r\n    //this.setState({grabBag: Randomizer(this.props.random).splice(0,12)})\r\n    this.setState({ notClicked: this.state.grabBag.slice() });\r\n    console.log(this.props)\r\n    console.log(this.state)\r\n  };\r\n\r\n  handleClick(val, err) {\r\n    //err.preventDefault();\r\n    const clicked = this.state.clicked.slice();\r\n    const tiles = this.state.notClicked.slice();\r\n    const tileBag = tiles.map(obj=>obj.id).sort();\r\n    console.log(tileBag)\r\n    console.log(val+\" \"+clicked)\r\n    if (clicked.every((click)=> { return val !== click })) {\r\n      clicked.push(val)\r\n      this.setState({ clicked: clicked });\r\n      this.setState({notClicked: this.Randomizer(this.state.notClicked)});\r\n      this.setState({score:this.state.score+1})\r\n      // this.setState({grabBag:[]})\r\n    } else {\r\n      this.setState({ score: 0 })\r\n      this.setState({notClicked: this.state.grabBag.slice()})\r\n      this.setState({clicked:[0]})\r\n    };\r\n    console.log(val);\r\n    console.log(this.state);\r\n  };\r\n\r\n  mortar = (values, index, arr) => {\r\n    return <Tile icons={values} key={index + values.name} handleClick={(x, y) => this.handleClick(x, y)} />\r\n  };\r\n\r\n  Randomizer = (mixer) => {\r\n    // this should have a \"check array\" section, to ensure it gets what is needs, but we know what is happening in this project, and it will get and array\r\n    var i = 0\r\n    var x = 0\r\n    const newArray = []\r\n    for (i = mixer.length; i > 0; i--) {\r\n      x = Math.floor(Math.random() * i);\r\n      newArray.push(mixer[x]);\r\n      mixer.splice(x, 1);\r\n    };\r\n    return newArray\r\n  };\r\n\r\n  render() {\r\n\r\n    const check = this.state;\r\n    console.log(check);\r\n    return (\r\n\r\n      <div>\r\n        <ScoreBoard score={this.state.score}>Clicky Memory Game</ScoreBoard>\r\n        <Wrapper>\r\n          {this.state.notClicked.map(this.mortar)}\r\n        </Wrapper>\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\nexport default TableTop; \r\n","import React, { Component } from 'react';\nimport './App.css';\nimport TableTop from './components/TableTop';\nimport icons from \"./icons.json\";\n//import Randomizer from \"./components/Randomizer\";Randomizer ={Randomizer}\n\nclass App extends Component {\n\n  render() {\n    return (\n     <TableTop icons = {icons}  />\n    );\n  }\n}\n\nexport default App;\n//random = {tiles}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('gameboard'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}